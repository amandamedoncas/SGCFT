// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SGCFT.Models;

namespace SGCFT.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20191129170001_UpdateCreate2")]
    partial class UpdateCreate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CertoErrado");

                    b.Property<int>("IdPergunta");

                    b.Property<int?>("PerguntaId");

                    b.Property<string>("Texto");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.ToTable("Alternativas");
                });

            modelBuilder.Entity("Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdTreinamento");

                    b.Property<string>("Titulo");

                    b.Property<int?>("TreinamentoId");

                    b.HasKey("Id");

                    b.HasIndex("TreinamentoId");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("Pergunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Texto");

                    b.HasKey("Id");

                    b.ToTable("Perguntas");
                });

            modelBuilder.Entity("Resposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdPergunta");

                    b.Property<int>("IdUsuario");

                    b.Property<string>("Solucao");

                    b.HasKey("Id");

                    b.ToTable("Respostas");
                });

            modelBuilder.Entity("Treinamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdAutor");

                    b.Property<string>("Senha");

                    b.Property<string>("Tema");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Treinamentos");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf");

                    b.Property<string>("Email");

                    b.Property<string>("Nome");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdModulo");

                    b.Property<int?>("ModuloId");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("ModuloId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Alternativa", b =>
                {
                    b.HasOne("Pergunta")
                        .WithMany("Alternativas")
                        .HasForeignKey("PerguntaId");
                });

            modelBuilder.Entity("Modulo", b =>
                {
                    b.HasOne("Treinamento")
                        .WithMany("Modulos")
                        .HasForeignKey("TreinamentoId");
                });

            modelBuilder.Entity("Video", b =>
                {
                    b.HasOne("Modulo")
                        .WithMany("Videos")
                        .HasForeignKey("ModuloId");
                });
#pragma warning restore 612, 618
        }
    }
}
